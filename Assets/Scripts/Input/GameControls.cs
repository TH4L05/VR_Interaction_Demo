//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/GameControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace eecon_lab.Input
{
    public partial class @GameControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @GameControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameControls"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""0def0048-d68f-4b02-8f06-a861da097501"",
            ""actions"": [
                {
                    ""name"": ""BaseMovement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f72c70d6-fc73-4263-886b-f8142d681174"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7b550bc6-5347-4643-8089-5eca87496a19"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""89bcf374-1037-417c-9c84-a866a2790799"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""d35a6b75-99b5-4da5-8bf2-7aa2aeb7fdde"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""080f3027-e72d-4a7a-88f2-5b1261e8b09d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""7e780a52-2e8b-45b8-b38c-473350a3105d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BaseMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""17beeee3-45ed-44c6-aa0f-9b9ce5c04f7a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BaseControls"",
                    ""action"": ""BaseMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""fd06c9ec-b31d-4e71-b284-3362ca735912"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BaseControls"",
                    ""action"": ""BaseMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f6156aa1-93c5-464d-a05a-bc0cea623645"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BaseControls"",
                    ""action"": ""BaseMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""087ef447-8c49-4b2a-ae71-92a30076e16c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BaseControls"",
                    ""action"": ""BaseMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""45239c6c-34cd-49c1-8bc2-bfcf49881e12"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BaseControls"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e56109d5-571b-45a4-a192-59de8790f8b4"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BaseControls"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""52d7b69e-276f-4976-8be5-db8a598bc85c"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BaseControls"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3815adae-5355-4491-bae6-e97e6b0961f9"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BaseControls"",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Other"",
            ""id"": ""204ec388-1f70-4543-9b21-bb8827c124a0"",
            ""actions"": [
                {
                    ""name"": ""LoadMainMenu"",
                    ""type"": ""Button"",
                    ""id"": ""28daa8b5-bcf6-4ffd-9f91-93eeffac4d68"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""118b49eb-ea0f-4152-94da-95ae86dcd389"",
                    ""path"": ""<Keyboard>/f1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BaseControls"",
                    ""action"": ""LoadMainMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""BaseControls"",
            ""bindingGroup"": ""BaseControls"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Movement
            m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
            m_Movement_BaseMovement = m_Movement.FindAction("BaseMovement", throwIfNotFound: true);
            m_Movement_Rotation = m_Movement.FindAction("Rotation", throwIfNotFound: true);
            m_Movement_Jump = m_Movement.FindAction("Jump", throwIfNotFound: true);
            m_Movement_Sprint = m_Movement.FindAction("Sprint", throwIfNotFound: true);
            m_Movement_Crouch = m_Movement.FindAction("Crouch", throwIfNotFound: true);
            // Other
            m_Other = asset.FindActionMap("Other", throwIfNotFound: true);
            m_Other_LoadMainMenu = m_Other.FindAction("LoadMainMenu", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Movement
        private readonly InputActionMap m_Movement;
        private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
        private readonly InputAction m_Movement_BaseMovement;
        private readonly InputAction m_Movement_Rotation;
        private readonly InputAction m_Movement_Jump;
        private readonly InputAction m_Movement_Sprint;
        private readonly InputAction m_Movement_Crouch;
        public struct MovementActions
        {
            private @GameControls m_Wrapper;
            public MovementActions(@GameControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @BaseMovement => m_Wrapper.m_Movement_BaseMovement;
            public InputAction @Rotation => m_Wrapper.m_Movement_Rotation;
            public InputAction @Jump => m_Wrapper.m_Movement_Jump;
            public InputAction @Sprint => m_Wrapper.m_Movement_Sprint;
            public InputAction @Crouch => m_Wrapper.m_Movement_Crouch;
            public InputActionMap Get() { return m_Wrapper.m_Movement; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
            public void AddCallbacks(IMovementActions instance)
            {
                if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
                @BaseMovement.started += instance.OnBaseMovement;
                @BaseMovement.performed += instance.OnBaseMovement;
                @BaseMovement.canceled += instance.OnBaseMovement;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
            }

            private void UnregisterCallbacks(IMovementActions instance)
            {
                @BaseMovement.started -= instance.OnBaseMovement;
                @BaseMovement.performed -= instance.OnBaseMovement;
                @BaseMovement.canceled -= instance.OnBaseMovement;
                @Rotation.started -= instance.OnRotation;
                @Rotation.performed -= instance.OnRotation;
                @Rotation.canceled -= instance.OnRotation;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
                @Sprint.started -= instance.OnSprint;
                @Sprint.performed -= instance.OnSprint;
                @Sprint.canceled -= instance.OnSprint;
                @Crouch.started -= instance.OnCrouch;
                @Crouch.performed -= instance.OnCrouch;
                @Crouch.canceled -= instance.OnCrouch;
            }

            public void RemoveCallbacks(IMovementActions instance)
            {
                if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IMovementActions instance)
            {
                foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public MovementActions @Movement => new MovementActions(this);

        // Other
        private readonly InputActionMap m_Other;
        private List<IOtherActions> m_OtherActionsCallbackInterfaces = new List<IOtherActions>();
        private readonly InputAction m_Other_LoadMainMenu;
        public struct OtherActions
        {
            private @GameControls m_Wrapper;
            public OtherActions(@GameControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @LoadMainMenu => m_Wrapper.m_Other_LoadMainMenu;
            public InputActionMap Get() { return m_Wrapper.m_Other; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(OtherActions set) { return set.Get(); }
            public void AddCallbacks(IOtherActions instance)
            {
                if (instance == null || m_Wrapper.m_OtherActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_OtherActionsCallbackInterfaces.Add(instance);
                @LoadMainMenu.started += instance.OnLoadMainMenu;
                @LoadMainMenu.performed += instance.OnLoadMainMenu;
                @LoadMainMenu.canceled += instance.OnLoadMainMenu;
            }

            private void UnregisterCallbacks(IOtherActions instance)
            {
                @LoadMainMenu.started -= instance.OnLoadMainMenu;
                @LoadMainMenu.performed -= instance.OnLoadMainMenu;
                @LoadMainMenu.canceled -= instance.OnLoadMainMenu;
            }

            public void RemoveCallbacks(IOtherActions instance)
            {
                if (m_Wrapper.m_OtherActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IOtherActions instance)
            {
                foreach (var item in m_Wrapper.m_OtherActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_OtherActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public OtherActions @Other => new OtherActions(this);
        private int m_BaseControlsSchemeIndex = -1;
        public InputControlScheme BaseControlsScheme
        {
            get
            {
                if (m_BaseControlsSchemeIndex == -1) m_BaseControlsSchemeIndex = asset.FindControlSchemeIndex("BaseControls");
                return asset.controlSchemes[m_BaseControlsSchemeIndex];
            }
        }
        public interface IMovementActions
        {
            void OnBaseMovement(InputAction.CallbackContext context);
            void OnRotation(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnSprint(InputAction.CallbackContext context);
            void OnCrouch(InputAction.CallbackContext context);
        }
        public interface IOtherActions
        {
            void OnLoadMainMenu(InputAction.CallbackContext context);
        }
    }
}
